# SkyBoot Core API - Production Docker Compose
# 프로덕션 환경용 Docker Compose 설정

services:
  # PostgreSQL 데이터베이스
  db:
    image: postgres:15-alpine
    container_name: skyboot-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: skybootcore_prod
      POSTGRES_USER: skyboot_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-skyboot_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - skyboot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skyboot_user -d skybootcore_prod"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis 캐시 서버
  redis:
    image: redis:7-alpine
    container_name: skyboot-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - skyboot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # SkyBoot Core API 애플리케이션
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: skyboot-api-prod
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://skyboot_user:${DB_PASSWORD:-skyboot_secure_password}@db:5432/skybootcore_prod?client_encoding=utf8
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/0
      - ENVIRONMENT=production
    env_file:
      - ./backend/.env.production
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
      - ./certs:/app/certs:ro
    ports:
      - "8000:8000"
    networks:
      - skyboot-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # SkyBoot Core Admin Frontend
  frontend-admin:
    build:
      context: ./frontend/frontend-admin
      dockerfile: Dockerfile
    container_name: skyboot-frontend-admin-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    env_file:
      - ./frontend/frontend-admin/.env.production
    ports:
      - "3000:80"
    networks:
      - skyboot-network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: skyboot-nginx-prod
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
      - ./frontend:/usr/share/nginx/html:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - skyboot-network
    depends_on:
      - api
      - frontend-admin
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  skyboot-network:
    driver: bridge
    name: skyboot-prod-network

volumes:
  postgres_data:
    driver: local
    name: skyboot-postgres-prod
  redis_data:
    driver: local
    name: skyboot-redis-prod